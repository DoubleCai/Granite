#version 450
#extension GL_EXT_mesh_shader : require
#extension GL_KHR_shader_subgroup_basic : require

#ifndef MESHLET_SIZE
#error "Must define MESHLET_SIZE"
#endif

layout(max_primitives = MESHLET_SIZE, max_vertices = MESHLET_SIZE, triangles) out;
layout(local_size_x = 32, local_size_y_id = 0) in;

#include "meshlet_payload_constants.h"
layout(constant_id = 0) const uint NUM_U32_STREAMS = MESHLET_PAYLOAD_MAX_STREAMS;

#define MESHLET_PAYLOAD_DESCRIPTOR_SET 0
#define MESHLET_PAYLOAD_META_BINDING 0
#define MESHLET_PAYLOAD_STREAM_BINDING 1
#define MESHLET_PAYLOAD_PAYLOAD_BINDING 2
#include "meshlet_payload_decode.h"
#include "meshlet_attribute_decode.h"
#include "meshlet_render_types.h"
#include "meshlet_primitive_cull.h"

layout(location = 0) out vec3 vWorldPos[];
layout(location = 1) perprimitiveEXT out uint vDrawID[];

layout(set = 1, binding = 0) uniform UBO
{
    mat4 VP;
};

layout(set = 1, binding = 2) uniform UBOViewport
{
    vec4 viewport;
};

#ifdef MESHLET_RENDER_TASK_HIERARCHICAL
taskPayloadSharedEXT CompactedDrawInfoPayload mesh_payload;
#else
layout(set = 0, binding = 4, std430) readonly buffer CompactedDraws
{
    CompactedDrawInfo infos[];
} mesh_payload;
#endif

layout(set = 0, binding = 5, std430) readonly buffer Transforms
{
    mat4 data[];
} transforms;

void main()
{
    uint linear_index = gl_LocalInvocationIndex;
    uint compacted_meshlet_index = meshlet_get_meshlet_index();
    uint base_chunk_index = meshlet_get_base_chunk_index();

#if defined(MESHLET_RENDER_TASK_HIERARCHICAL) && !MESHLET_RENDER_TASK_HIERARCHICAL
    CompactedDrawInfo task = mesh_payload.info;
    task.meshlet_index += uint(mesh_payload.offsets[compacted_meshlet_index]);
#else
    CompactedDrawInfo task = mesh_payload.infos[compacted_meshlet_index];
#endif

    MeshletMetaRuntime meta = meshlet_metas_runtime.data[task.meshlet_index];
    mat4 M = transforms.data[task.node_offset];

    int lane_index;
    uint chunk_index;

    if (gl_SubgroupSize == 32)
    {
        chunk_index = gl_SubgroupID;
        lane_index = int(gl_SubgroupInvocationID);
    }
    else
    {
        chunk_index = gl_LocalInvocationID.y;
        lane_index = int(gl_LocalInvocationID.x);
    }

    meshlet_setup_local_invocation(uvec2(lane_index, chunk_index));
    chunk_index += base_chunk_index;

    MeshletChunkInfo index_chunk_info = meshlet_get_chunk_info(meta.stream_offset, chunk_index);
    uint decoded_index_buffer = 0;
    vec3 world_pos;
    vec4 clip_pos = vec4(-1.0);

    if (chunk_index < meta.num_chunks)
    {
        if (lane_index < index_chunk_info.primitive_count)
            decoded_index_buffer = meshlet_decode_index_buffer(meta.stream_offset, chunk_index, lane_index);

        if (lane_index < index_chunk_info.vertex_count)
        {
            int exponent;
            i16vec3 ipos = meshlet_decode_snorm_scaled_i16x3(meta.stream_offset + 1, chunk_index, lane_index, exponent);
            vec3 pos = ldexp(vec3(ipos), ivec3(exponent));
            world_pos = (M * vec4(pos, 1.0)).xyz;
            clip_pos = VP * vec4(world_pos, 1.0);
        }
    }

    meshlet_emit_clip_pos(clip_pos, viewport);
    meshlet_emit_primitive(unpack8(decoded_index_buffer).xyz);
    if (linear_index < shared_active_prim_count_total)
        vDrawID[linear_index] = task.meshlet_index;

    if (meshlet_lane_has_active_vert())
    {
        uint out_vert_index = meshlet_compacted_vertex_output();
        gl_MeshVerticesEXT[out_vert_index].gl_Position = clip_pos;
        vWorldPos[out_vert_index] = world_pos;
    }
}
