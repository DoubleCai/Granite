#version 450
#extension GL_EXT_mesh_shader : require

layout(max_primitives = 256, max_vertices = 255, triangles) out;

#include "meshlet_payload_constants.h"
layout(local_size_x = 32, local_size_y = MESHLET_PAYLOAD_NUM_CHUNKS) in;
layout(constant_id = 0) const uint NUM_U32_STREAMS = 1;
#define MESHLET_PAYLOAD_NUM_U32_STREAMS NUM_U32_STREAMS
#define MESHLET_PAYLOAD_DESCRIPTOR_SET 0
#define MESHLET_PAYLOAD_META_BINDING 0
#define MESHLET_PAYLOAD_STREAM_BINDING 1
#define MESHLET_PAYLOAD_PAYLOAD_BINDING 2
#include "meshlet_payload_decode.h"
#include "meshlet_attribute_decode.h"

layout(location = 0) perprimitiveEXT out uint vMeshletIndex[];
layout(location = 1) out mediump vec3 vNormal[];
layout(location = 2) out mediump vec4 vTangent[];
layout(location = 3) out vec2 vUV[];

layout(set = 1, binding = 0) uniform UBO
{
    mat4 VP;
};

void main()
{
    uint meshlet_index = gl_WorkGroupID.x;
    meshlet_init_workgroup(meshlet_index);
    MeshletMeta meta = meshlet_metas.data[meshlet_index];

    meshlet_init_workgroup(meshlet_index);
    uint linear_index = meshlet_get_linear_index();
    uint packed_indices = meshlet_decode_stream(meshlet_index, 0);

    SetMeshOutputsEXT(meta.num_attributes_minus_1 + 1, meta.num_primitives_minus_1 + 1);

    // Mildly questionable reliance on LocalInvocationIndex mapping well to SubgroupInvocationID here.
    // There is basically no way this will not work in practice however ...
    // We have full subgroups and workgroup size X == SubgroupSize.
    // Using LocalInvocationIndex specifically is important for AMD perf.

    if (linear_index <= meta.num_primitives_minus_1)
    {
        gl_PrimitiveTriangleIndicesEXT[gl_LocalInvocationIndex] = uvec4(unpack8(packed_indices)).xyz;
        vMeshletIndex[gl_LocalInvocationIndex] = meshlet_index;
    }

    uint pos0 = meshlet_decode_stream(meshlet_index, 1);
    uint pos1 = meshlet_decode_stream(meshlet_index, 2);
    if (linear_index <= meta.num_attributes_minus_1)
    {
        vec3 pos = attribute_decode_snorm_exp_position(uvec2(pos0, pos1));
        gl_MeshVerticesEXT[gl_LocalInvocationIndex].gl_Position = VP * vec4(pos, 1.0);
    }

    uint n = meshlet_decode_stream(meshlet_index, 3);
    if (linear_index <= meta.num_attributes_minus_1)
        vNormal[gl_LocalInvocationIndex] = attribute_decode_oct8_normal_tangent(n).xyz;

    uint t = meshlet_decode_stream(meshlet_index, 4);
    if (linear_index <= meta.num_attributes_minus_1)
        vTangent[gl_LocalInvocationIndex] = attribute_decode_oct8_normal_tangent(t);

    uint uv0 = meshlet_decode_stream(meshlet_index, 5);
    uint uv1 = meshlet_decode_stream(meshlet_index, 6);
    if (linear_index <= meta.num_attributes_minus_1)
        vUV[gl_LocalInvocationIndex] = attribute_decode_snorm_exp_uv(uvec2(uv0, uv1));
}