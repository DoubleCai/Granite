#version 450
layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0) uniform mediump sampler2D uImage;
layout(set = 0, binding = 1) writeonly uniform mediump image2D uLuma;
layout(set = 0, binding = 2) writeonly uniform mediump image2D uChromaCb;
layout(set = 0, binding = 3) writeonly uniform mediump image2D uChromaCr;

#include "../post/lanczos2.h"

layout(push_constant) uniform Registers
{
    uvec2 resolution;
    vec2 base_uv;
    vec2 inv_resolution;
    vec2 input_resolution;
    vec2 inv_input_resolution;
    float dither_strength;
} registers;

layout(set = 0, binding = 4) uniform Transform
{
	mat3 rgb_to_yuv;
};

layout(set = 0, binding = 5) uniform PrimaryTransform
{
	mat3 primaries;
};

layout(constant_id = 0) const bool LIMITED = false;
layout(constant_id = 1) const bool DITHER = false;
layout(constant_id = 2) const bool RESCALE = false;
layout(constant_id = 3) const bool PQ = false;
layout(constant_id = 4) const bool PRIMARY_TRANSFORM = false;

#define D(x) ((x) - 0.5)
const mediump float dither[] = float[](
    D(0.0625), D(0.5625), D(0.1875), D(0.6875),
    D(0.8125), D(0.3125), D(0.9375), D(0.4375),
    D(0.25), D(0.75), D(0.125), D(0.625),
    D(1.00), D(0.5), D(0.875), D(0.375));

void main()
{
    uvec2 coord = gl_GlobalInvocationID.xy;
    if (all(lessThan(coord, registers.resolution)))
    {
        mediump vec3 rgb;

        if (RESCALE)
        {
            vec2 uv = registers.base_uv + vec2(coord) * registers.inv_resolution;
            rgb = lanczos2(uImage, uv * registers.input_resolution, registers.inv_input_resolution);
        }
        else
        {
            rgb = texelFetch(uImage, ivec2(coord), 0).rgb;
        }

		if (PRIMARY_TRANSFORM)
			rgb = primaries * rgb;

		if (PQ)
		{
			vec3 y = clamp(vec3(rgb) / 10000.0, vec3(0.0), vec3(1.0));
			const float c1 = 0.8359375;
			const float c2 = 18.8515625;
			const float c3 = 18.6875;
			const float m1 = 0.1593017578125;
			const float m2 = 78.84375;
			vec3 num = c1 + c2 * pow(y, vec3(m1));
			vec3 den = 1.0 + c3 * pow(y, vec3(m1));
			rgb = pow(num / den, vec3(m2));
		}

        mediump vec3 ycbcr = rgb * rgb_to_yuv;

        if (LIMITED)
        {
            ycbcr *= vec3(219.0 / 255.0, 224.0 / 255.0, 224.0 / 255.0);
            ycbcr += vec3(16.0 / 255.0, 128.0 / 255.0, 128.0 / 255.0);
        }
        else
            ycbcr += vec3(0.0 / 255.0, 128.0 / 255.0, 128.0 / 255.0);

        if (DITHER)
            ycbcr += dither[(coord.y & 3u) * 4 + (coord.x & 3u)] * registers.dither_strength;

        imageStore(uLuma, ivec2(coord), ycbcr.xxxx);
        imageStore(uChromaCb, ivec2(coord), ycbcr.yyyy);
        imageStore(uChromaCr, ivec2(coord), ycbcr.zzzz);
    }
}
