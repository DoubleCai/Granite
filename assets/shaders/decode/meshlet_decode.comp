#version 450

#extension GL_EXT_scalar_block_layout : require
#include "../inc/meshlet_payload_constants.h"

#define MESHLET_PAYLOAD_LARGE_WORKGROUP 1

#if MESHLET_PAYLOAD_LARGE_WORKGROUP
#define MESHLET_PAYLOAD_WG_Y MESHLET_PAYLOAD_NUM_CHUNKS
#else
#define MESHLET_PAYLOAD_WG_Y 1
#endif
layout(local_size_x = 32, local_size_y = MESHLET_PAYLOAD_WG_Y) in;

layout(constant_id = 0) const uint NUM_U32_STREAMS = MESHLET_PAYLOAD_MAX_STREAMS;
#define MESHLET_PAYLOAD_NUM_U32_STREAMS NUM_U32_STREAMS
#define MESHLET_PAYLOAD_DESCRIPTOR_SET 0
#define MESHLET_PAYLOAD_META_BINDING 0
#define MESHLET_PAYLOAD_STREAM_BINDING 1
#define MESHLET_PAYLOAD_PAYLOAD_BINDING 4
#include "../inc/meshlet_payload_decode.h"

layout(set = 0, binding = 2, std430) writeonly buffer OutputAttributes
{
    uint data[];
} output_payload;

layout(set = 0, binding = 3, scalar) writeonly buffer OutputIndices
{
    uvec3 data[];
} output_indices;

layout(set = 0, binding = 5, std430) readonly buffer OutputOffsets
{
    uvec2 data[];
} output_offset_strides;

void main()
{
    uint meshlet_index = gl_WorkGroupID.x;
    meshlet_init_workgroup(meshlet_index);
    MeshletMeta meta = meshlet_metas.data[meshlet_index];

#define INDEX(linear_index, packed_indices) { \
    uvec3 indices = uvec4(unpack8(packed_indices)).xyz; \
    indices += meta.base_vertex_offset; \
    uint output_offset = output_offset_strides.data[meshlet_index * NUM_U32_STREAMS].x; \
    if (linear_index <= uint(meta.num_primitives_minus_1)) \
        output_indices.data[output_offset + linear_index] = indices; \
}

#define ATTR(linear_index, packed_decoded) { \
    uvec2 output_offset_stride0 = output_offset_strides.data[meshlet_index * NUM_U32_STREAMS + i]; \
    if (linear_index <= uint(meta.num_attributes_minus_1)) \
        output_payload.data[output_offset_stride0.x + linear_index * output_offset_stride0.y] = packed_decoded; \
}

    {
        MESHLET_DECODE_STREAM_32(meshlet_index, 0, INDEX);
    }

    for (uint i = 1; i < NUM_U32_STREAMS; i++)
    {
        MESHLET_DECODE_STREAM_32(meshlet_index, i, ATTR);
    }
}
