#version 450

#extension GL_EXT_scalar_block_layout : require
#include "../inc/meshlet_payload_constants.h"
#extension GL_KHR_shader_subgroup_basic : require

layout(local_size_x = 32) in;

layout(constant_id = 0) const uint NUM_U32_STREAMS = MESHLET_PAYLOAD_MAX_STREAMS;
layout(constant_id = 1) const bool UNROLLED_MESH = false;
layout(constant_id = 2) const uint TARGET_MESH_STYLE = 0;
layout(constant_id = 3) const bool RUNTIME_MESH = false;

#define MESHLET_PAYLOAD_DESCRIPTOR_SET 0
#define MESHLET_PAYLOAD_META_BINDING 0
#define MESHLET_PAYLOAD_STREAM_BINDING 1
#define MESHLET_PAYLOAD_PAYLOAD_BINDING 2
#include "../inc/meshlet_payload_decode.h"
#include "../inc/meshlet_attribute_decode.h"
#include "../inc/meshlet_payload_constants.h"

const int MESH_STYLE_WIREFRAME = 0;
const int MESH_STYLE_TEXTURED = 1;
const int MESH_STYLE_SKINNED = 2;

layout(set = 0, binding = 3, scalar) writeonly buffer OutputIndices
{
    uvec3 data[];
} output_indices32;

layout(set = 0, binding = 3, scalar) writeonly buffer OutputIndices8
{
    u8vec3 data[];
} output_indices8;

layout(set = 0, binding = 4, scalar) writeonly buffer OutputStreamPos
{
    vec3 data[];
} output_stream_pos;

struct TexturedAttr
{
    uint normal;
    uint tangent;
    vec2 uv;
};

layout(set = 0, binding = 5, std430) writeonly buffer OutputStreamTextured
{
    TexturedAttr data[];
} output_stream_textured_attr;

layout(set = 0, binding = 6, std430) writeonly buffer OutputStreamSkin
{
    uvec2 data[];
} output_stream_skin;

layout(set = 0, binding = 7, std430) readonly buffer OutputOffsets
{
    uint data[];
} primitive_output_offsets;

struct IndirectDrawMesh
{
    uint primitive_offset;
    uint vertex_offset;
    uint primitive_count;
    uint vertex_count;
};

layout(set = 0, binding = 8, std430) writeonly buffer IndirectCommandsMesh
{
    IndirectDrawMesh draws[];
} indirect_commands_mesh;

struct IndirectIndexedDraw
{
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    uint vertexOffset;
    uint firstInstance;
};

layout(set = 0, binding = 8, std430) writeonly buffer IndirectCommandsMDI
{
    IndirectIndexedDraw draws[];
} indirect_commands_mdi;

layout(push_constant, std430) uniform Registers
{
    uint primitive_offset;
    uint vertex_offset;
    uint meshlet_offset;
} registers;

uint pack_a2bgr10(vec4 v)
{
    ivec4 quantized = ivec4(round(clamp(v, vec4(-1.0), vec4(1.0)) * vec4(511.0, 511.0, 511.0, 1.0))) & ivec4(1023, 1023, 1023, 3);
    return (quantized.a << 30) | (quantized.b << 20) | (quantized.g << 10) | (quantized.r << 0);
}

void main()
{
    uint meshlet_index = gl_WorkGroupID.x;
    MeshletMetaRaw meta = meshlet_metas_raw.data[meshlet_index];

    uint lane_index;
    if (gl_SubgroupSize == 32)
        lane_index = gl_SubgroupInvocationID;
    else
        lane_index = gl_LocalInvocationIndex;

    uint primitive_output_offset = primitive_output_offsets.data[meshlet_index] + registers.primitive_offset;
    MeshletInfo info = meshlet_get_meshlet_info(meshlet_index * NUM_U32_STREAMS);

    if (!UNROLLED_MESH && gl_LocalInvocationIndex == 0)
    {
        if (RUNTIME_MESH)
        {
            IndirectDrawMesh draw;
            draw.primitive_offset = primitive_output_offset;
            draw.vertex_offset = meta.base_vertex_offset + registers.vertex_offset;
            draw.primitive_count = info.primitive_count;
            draw.vertex_count = info.vertex_count;
            indirect_commands_mesh.draws[meshlet_index + registers.meshlet_offset] = draw;
        }
        else
        {
            IndirectIndexedDraw draw;
            draw.indexCount = 3 * info.primitive_count;
            draw.instanceCount = 1;
            draw.vertexOffset = meta.base_vertex_offset + registers.vertex_offset;
            draw.firstIndex = 3 * primitive_output_offset;
            draw.firstInstance = 0;
            indirect_commands_mdi.draws[meshlet_index + registers.meshlet_offset] = draw;
        }
    }

    // Index
    if (lane_index < info.primitive_count)
    {
        uvec3 indices = meshlet_decode_index_buffer(
                meshlet_index * NUM_U32_STREAMS + MESHLET_STREAM_TYPE_PRIMITIVE,
                lane_index);

        if (UNROLLED_MESH)
            output_indices32.data[primitive_output_offset + lane_index] = indices + meta.base_vertex_offset;
        else
            output_indices8.data[primitive_output_offset + lane_index] = u8vec3(indices);
    }

    // Attributes
    if (lane_index < info.vertex_count)
    {
        int exponent;
        i16vec3 pos = meshlet_decode_snorm_scaled_i16x3(
                meshlet_index * NUM_U32_STREAMS + MESHLET_STREAM_TYPE_POSITION,
                lane_index, exponent);

        vec3 fp_pos = ldexp(vec3(pos), ivec3(exponent));
        uint vertex_output_offset = registers.vertex_offset + meta.base_vertex_offset;
        output_stream_pos.data[vertex_output_offset + lane_index] = fp_pos;

        if (TARGET_MESH_STYLE >= MESH_STYLE_TEXTURED)
        {
            bool t_sign;
            u8vec4 nt = meshlet_decode_normal_tangent_oct8(
                    meshlet_index * NUM_U32_STREAMS + MESHLET_STREAM_TYPE_NORMAL_TANGENT_OCT8,
                    lane_index, t_sign);
            i16vec2 uv = meshlet_decode_snorm_scaled_i16x2(
                    meshlet_index * NUM_U32_STREAMS + MESHLET_STREAM_TYPE_UV,
                    lane_index, exponent);
            vec2 fp_uv = attribute_decode_snorm_exp_uv(uv, exponent);

            mediump mat2x4 NT = attribute_decode_oct8_normal_tangent(nt, t_sign);
            output_stream_textured_attr.data[vertex_output_offset + lane_index] =
                TexturedAttr(pack_a2bgr10(NT[0]), pack_a2bgr10(NT[1]), fp_uv);
        }
    }
}
