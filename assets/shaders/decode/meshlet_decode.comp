#version 450

#extension GL_EXT_scalar_block_layout : require
#include "../inc/meshlet_payload_constants.h"

#define MESHLET_PAYLOAD_LARGE_WORKGROUP 1

#if MESHLET_PAYLOAD_LARGE_WORKGROUP
#define MESHLET_PAYLOAD_WG_Y MESHLET_PAYLOAD_NUM_CHUNKS
#else
#define MESHLET_PAYLOAD_WG_Y 1
#endif
layout(local_size_x = 32, local_size_y = MESHLET_PAYLOAD_WG_Y) in;

layout(constant_id = 0) const uint NUM_U32_STREAMS = MESHLET_PAYLOAD_MAX_STREAMS;
layout(constant_id = 1) const uint NUM_OUTPUT_U32_STREAMS = 1;
layout(constant_id = 2) const bool RAW_PAYLOAD = false;
#define MESHLET_PAYLOAD_NUM_U32_STREAMS NUM_U32_STREAMS
#define MESHLET_PAYLOAD_DESCRIPTOR_SET 0
#define MESHLET_PAYLOAD_META_BINDING 0
#define MESHLET_PAYLOAD_STREAM_BINDING 1
#define MESHLET_PAYLOAD_PAYLOAD_BINDING 2
#include "../inc/meshlet_payload_decode.h"
#include "../inc/meshlet_attribute_decode.h"

const int MESH_STYLE = int(NUM_OUTPUT_U32_STREAMS);
const int MESH_STYLE_WIREFRAME = 0;
const int MESH_STYLE_TEXTURED = 1;
const int MESH_STYLE_SKINNED = 2;

layout(set = 0, binding = 3, scalar) writeonly buffer OutputIndices
{
    uvec3 data[];
} output_indices32;

layout(set = 0, binding = 3, scalar) writeonly buffer OutputIndices8
{
    u8vec3 data[];
} output_indices8;

layout(set = 0, binding = 4, std430) writeonly buffer OutputStream0
{
    uint data[];
} output_stream_raw;

layout(set = 0, binding = 4, scalar) writeonly buffer OutputStreamPos
{
    vec3 data[];
} output_stream_pos;

struct TexturedAttr
{
    uint normal;
    uint tangent;
    vec2 uv;
};

layout(set = 0, binding = 5, std430) writeonly buffer OutputStreamTextured
{
    TexturedAttr data[];
} output_stream_textured_attr;

layout(set = 0, binding = 6, std430) writeonly buffer OutputStreamSkin
{
    uvec2 data[];
} output_stream_skin;

layout(set = 0, binding = 7, std430) readonly buffer OutputOffsets
{
    uvec2 data[];
} output_offset_strides;

#if MESHLET_PAYLOAD_RUNTIME_MESH
struct IndirectDrawMesh
{
    uint primitive_offset;
    uint vertex_offset;
    uint num_primitives;
    uint num_attributes;
};

layout(set = 0, binding = 8, std430) writeonly buffer IndirectCommands
{
    IndirectDrawMesh draws[];
} indirect_commands_mesh;
#else
struct IndirectIndexedDraw
{
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    uint vertexOffset;
    uint firstInstance;
};

layout(set = 0, binding = 8, std430) writeonly buffer IndirectCommands
{
    IndirectIndexedDraw draws[];
} indirect_commands;
#endif

layout(push_constant, std430) uniform Registers
{
    uint primitive_offset;
    uint vertex_offset;
    uint meshlet_offset;
} registers;

uint pack_a2bgr10(vec4 v)
{
    ivec4 quantized = ivec4(round(clamp(v, vec4(-1.0), vec4(1.0)) * vec4(511.0, 511.0, 511.0, 1.0))) & ivec4(1023, 1023, 1023, 3);
    return (quantized.a << 30) | (quantized.b << 20) | (quantized.g << 10) | (quantized.r << 0);
}

void main()
{
    uint meshlet_index = gl_WorkGroupID.x;
    meshlet_init_workgroup(meshlet_index * NUM_U32_STREAMS);
    MeshletMetaRaw meta = meshlet_metas_raw.data[meshlet_index];

    if (!RAW_PAYLOAD)
    {
#if MESHLET_PAYLOAD_RUNTIME_MESH
        IndirectDrawMesh draw;
        draw.primitive_offset = output_offset_strides.data[meshlet_index].x + registers.primitive_offset;
        draw.vertex_offset = meta.base_vertex_offset + registers.vertex_offset;
        draw.num_primitives = meta.num_primitives;
        draw.num_attributes = meta.num_attributes;
        indirect_commands_mesh.draws[meshlet_index + registers.meshlet_offset] = draw;
#else
        IndirectIndexedDraw draw;
        draw.indexCount = 3 * meta.num_primitives;
        draw.instanceCount = 1;
        draw.vertexOffset = meta.base_vertex_offset + registers.vertex_offset;
        draw.firstIndex = 3 * (output_offset_strides.data[meshlet_index].x + registers.primitive_offset);
        draw.firstInstance = 0;
        indirect_commands.draws[meshlet_index + registers.meshlet_offset] = draw;
#endif
    }

#define INDEX(linear_index, packed_indices) { \
    uint output_offset; \
    if (RAW_PAYLOAD) { \
        uvec3 indices = uvec4(unpack8(packed_indices)).xyz; \
        indices += meta.base_vertex_offset + registers.vertex_offset; \
        output_offset = output_offset_strides.data[meshlet_index * NUM_OUTPUT_U32_STREAMS].x; \
        output_offset += registers.primitive_offset; \
        if (linear_index < uint(meta.num_primitives)) \
            output_indices32.data[output_offset + linear_index] = indices; \
    } else { \
        output_offset = output_offset_strides.data[meshlet_index].x; \
        output_offset += registers.primitive_offset; \
        if (linear_index < uint(meta.num_primitives)) \
            output_indices8.data[output_offset + linear_index] = unpack8(packed_indices).xyz; \
    } \
}

    {
        MESHLET_DECODE_STREAM_32(meshlet_index * NUM_U32_STREAMS, 0, INDEX);
    }

    if (RAW_PAYLOAD)
    {
#define ATTR(linear_index, packed_decoded) { \
    uvec2 output_offset_stride0 = output_offset_strides.data[meshlet_index * NUM_OUTPUT_U32_STREAMS + i]; \
    output_offset_stride0.x += registers.vertex_offset; \
    if (linear_index < uint(meta.num_attributes)) \
        output_stream_raw.data[output_offset_stride0.x + linear_index * output_offset_stride0.y] = packed_decoded; \
}

        for (uint i = 1; i < NUM_OUTPUT_U32_STREAMS; i++)
        {
            MESHLET_DECODE_STREAM_32(meshlet_index * NUM_U32_STREAMS, i, ATTR);
        }
    }
    else
    {
        uint output_offset = output_offset_strides.data[meshlet_index].y;
        output_offset += registers.vertex_offset;

#define POS(linear_index, packed_decoded) { \
    if (linear_index < uint(meta.num_attributes)) \
        output_stream_pos.data[output_offset + linear_index] = attribute_decode_snorm_exp_position(packed_decoded); \
}

#define NORMAL(linear_index, packed_decoded) { \
    if (linear_index < uint(meta.num_attributes)) { \
        output_stream_textured_attr.data[output_offset + linear_index].normal = pack_a2bgr10(attribute_decode_oct8_normal_tangent(packed_decoded)); \
    } \
}

#define TANGENT(linear_index, packed_decoded) { \
    if (linear_index < uint(meta.num_attributes)) { \
        output_stream_textured_attr.data[output_offset + linear_index].tangent = pack_a2bgr10(attribute_decode_oct8_normal_tangent(packed_decoded)); \
    } \
}

#define UV(linear_index, packed_decoded) { \
    if (linear_index < uint(meta.num_attributes)) { \
        output_stream_textured_attr.data[output_offset + linear_index].uv = attribute_decode_snorm_exp_uv(packed_decoded); \
    } \
}

#define SKIN(linear_index, packed_decoded) { \
    if (linear_index < uint(meta.num_attributes)) { \
        output_stream_skin.data[output_offset + linear_index] = packed_decoded; \
    } \
}
        {
            MESHLET_DECODE_STREAM_64(meshlet_index * NUM_U32_STREAMS, 1, POS);
        }

        if (MESH_STYLE >= MESH_STYLE_TEXTURED)
        {
            MESHLET_DECODE_STREAM_32(meshlet_index * NUM_U32_STREAMS, 3, NORMAL);
            MESHLET_DECODE_STREAM_32(meshlet_index * NUM_U32_STREAMS, 4, TANGENT);
            MESHLET_DECODE_STREAM_64(meshlet_index * NUM_U32_STREAMS, 5, UV);
        }

        if (MESH_STYLE >= MESH_STYLE_SKINNED)
        {
            MESHLET_DECODE_STREAM_64(meshlet_index * NUM_U32_STREAMS, 7, SKIN);
        }
    }
}
